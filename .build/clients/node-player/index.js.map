{"version":3,"names":["Client","launcher","loadConfig","createLayout","AudioContext","GainNode","OscillatorNode","mediaDevices","MediaStreamAudioSourceNode","AnalyserNode","Engine","bootstrap","config","process","env","ENV","import","meta","url","client","register","start","player","stateManager","create","id","$layout","audioContext","engine","onUpdate","requestUpdate","render","execute","numClients","EMULATE","parseInt","moduleURL"],"sources":["../../../src/clients/node-player/index.js"],"sourcesContent":["import '@soundworks/helpers/polyfills.js';\nimport { Client } from '@soundworks/core/client.js';\nimport launcher from '@soundworks/helpers/launcher.js';\n\nimport { loadConfig } from '../../utils/load-config.js';\nimport createLayout from './layout.js';\n\nimport { AudioContext, GainNode, OscillatorNode, mediaDevices, MediaStreamAudioSourceNode, AnalyserNode } from 'node-web-audio-api';\n\nimport Engine from '../components/engine.js';\n\n// - General documentation: https://soundworks.dev/\n// - API documentation:     https://soundworks.dev/api\n// - Issue Tracker:         https://github.com/collective-soundworks/soundworks/issues\n// - Wizard & Tools:        `npx soundworks`\n\nasync function bootstrap() {\n  /**\n   * Load configuration from config files and create the soundworks client\n   */\n  const config = loadConfig(process.env.ENV, import.meta.url);\n  const client = new Client(config);\n\n  /**\n   * Register some soundworks plugins, you will need to install the plugins\n   * before hand (run `npx soundworks` for help)\n   */\n  // client.pluginManager.register('my-plugin', plugin);\n\n  /**\n   * Register the soundworks client into the launcher\n   *\n   * Automatically restarts the process when the socket closes or when an\n   * uncaught error occurs in the program.\n   */\n  launcher.register(client);\n\n  /**\n   * Launch application\n   */\n  await client.start();\n\n  const player = await client.stateManager.create('player', {\n    id: client.id,\n  });\n\n  // create application layout (which mimics the client-side API)\n  const $layout = createLayout(client);\n\n  const audioContext = new AudioContext();\n  const engine = new Engine(audioContext, player);\n  // ...and do your own stuff!\n\n  player.onUpdate(() => {\n    $layout.requestUpdate();\n    engine.render();\n  });\n}\n\n// The launcher allows to fork multiple clients in the same terminal window\n// by defining the `EMULATE` env process variable\n// e.g. `EMULATE=10 npm run watch-process thing` to run 10 clients side-by-side\nlauncher.execute(bootstrap, {\n  numClients: process.env.EMULATE ? parseInt(process.env.EMULATE) : 1,\n  moduleURL: import.meta.url,\n});\n"],"mappings":"AAAA,OAAO,kCAAkC;AACzC,SAASA,MAAM,QAAQ,4BAA4B;AACnD,OAAOC,QAAQ,MAAM,iCAAiC;AAEtD,SAASC,UAAU,QAAQ,4BAA4B;AACvD,OAAOC,YAAY,MAAM,aAAa;AAEtC,SAASC,YAAY,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,YAAY,EAAEC,0BAA0B,EAAEC,YAAY,QAAQ,oBAAoB;AAEnI,OAAOC,MAAM,MAAM,yBAAyB;;AAE5C;AACA;AACA;AACA;;AAEA,eAAeC,SAASA,CAAA,EAAG;EACzB;AACF;AACA;EACE,MAAMC,MAAM,GAAGV,UAAU,CAACW,OAAO,CAACC,GAAG,CAACC,GAAG,EAAEC,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;EAC3D,MAAMC,MAAM,GAAG,IAAInB,MAAM,CAACY,MAAM,CAAC;;EAEjC;AACF;AACA;AACA;EACE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEX,QAAQ,CAACmB,QAAQ,CAACD,MAAM,CAAC;;EAEzB;AACF;AACA;EACE,MAAMA,MAAM,CAACE,KAAK,CAAC,CAAC;EAEpB,MAAMC,MAAM,GAAG,MAAMH,MAAM,CAACI,YAAY,CAACC,MAAM,CAAC,QAAQ,EAAE;IACxDC,EAAE,EAAEN,MAAM,CAACM;EACb,CAAC,CAAC;;EAEF;EACA,MAAMC,OAAO,GAAGvB,YAAY,CAACgB,MAAM,CAAC;EAEpC,MAAMQ,YAAY,GAAG,IAAIvB,YAAY,CAAC,CAAC;EACvC,MAAMwB,MAAM,GAAG,IAAIlB,MAAM,CAACiB,YAAY,EAAEL,MAAM,CAAC;EAC/C;;EAEAA,MAAM,CAACO,QAAQ,CAAC,MAAM;IACpBH,OAAO,CAACI,aAAa,CAAC,CAAC;IACvBF,MAAM,CAACG,MAAM,CAAC,CAAC;EACjB,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA9B,QAAQ,CAAC+B,OAAO,CAACrB,SAAS,EAAE;EAC1BsB,UAAU,EAAEpB,OAAO,CAACC,GAAG,CAACoB,OAAO,GAAGC,QAAQ,CAACtB,OAAO,CAACC,GAAG,CAACoB,OAAO,CAAC,GAAG,CAAC;EACnEE,SAAS,EAAEpB,MAAM,CAACC,IAAI,CAACC;AACzB,CAAC,CAAC"}
